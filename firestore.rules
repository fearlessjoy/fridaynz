rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.userRole == 'admin';
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isTeamMember() {
      return isAuthenticated() &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid));
    }
    
    // Allow users collection access
    match /users/{userId} {
      // Allow read for all authenticated team members
      allow read: if isTeamMember();
      
      // Allow write if user is admin or creating/updating their own profile
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (isOwner(userId) || isAdmin());
      allow delete: if isAdmin();
    }
    
    // Tasks collection specific rules
    match /tasks/{taskId} {
      allow read: if isTeamMember();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        // Allow status updates only for assigned user or admin
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status']) 
          ? resource.data.assignedTo == request.auth.uid || isAdmin()
          : true) &&
        // Allow comment additions for all team members
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['comments']) 
          ? isTeamMember()
          : true)
      );
      allow delete: if isAdmin();
    }
    
    // Conversations can only be read and written by participants
    match /conversations/{conversationId} {
      // Allow read operations (both list and get) for authenticated users
      // This is simplified to help with debugging
      allow read: if request.auth != null;
      
      // Allow creating a conversation if user includes themselves as participant
      allow create: if request.auth != null && 
                     request.resource.data.participants is list && 
                     request.auth.uid in request.resource.data.participants;
      
      // Allow updating a conversation if user is a participant
      allow update: if request.auth != null && 
                    (resource.data.participants is list &&
                     request.auth.uid in resource.data.participants);
      
      // Allow deleting a conversation if user is a participant and it's not a group, or user is admin
      allow delete: if request.auth != null && (
                      (resource.data.participants is list &&
                       request.auth.uid in resource.data.participants && 
                       (!resource.data.isGroup || resource.data.isGroup == false)) || 
                      get(/databases/$(database)/documents/users/$(request.auth.uid)).data.userRole == 'admin'
                    );
    }
    
    // Notifications can only be read/written by the recipient or admins
    match /notifications/{notificationId} {
      allow read: if request.auth != null && 
        (resource.data.userId == request.auth.uid || 
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.userRole == 'admin');
      allow write: if request.auth != null;
    }
    
    // Default rules for other collections
    match /{collection}/{docId} {
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid || isAdmin()
      );
      
      allow create: if isAuthenticated();
      
      allow update: if isAuthenticated() && (
        resource.data.userId == request.auth.uid || isAdmin()
      );
      
      allow delete: if isAuthenticated() && (
        resource.data.userId == request.auth.uid || isAdmin()
      );
    }
  }
} 